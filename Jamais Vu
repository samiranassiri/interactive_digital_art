PImage[] flowers = new PImage[14];
Bubble b1;
int index;
 
float phase = 0;
float zoff = 0;
 

void setup() {
  size(900, 900);
  index = 1;
  for (int i=1; i<flowers.length; i++) {
    flowers[i] = loadImage("flower" +i+ ".png");
  }
  b1 = new Bubble(900);
  println(frameCount);
  frameRate(60);
}
 
void loadNextImage() {
  index ++;
  if (index == flowers.length) {
    index = 0;
  }
}
 
void draw() {
  background(0);
  tint(random(255), random(255), random(255));
 
 
 

pushMatrix();
  translate(width/2, height/2);
  stroke(random(255), random(255), random(255));
  strokeWeight(50);
  noFill();
  beginShape();
  float noiseMax = map(mouseX, mouseY, width, 1, 4);
  for (float a = 0; a < TWO_PI; a += radians(5)) {
    float xoff = map(cos(a + phase), -1, 1, 0, noiseMax);
    float yoff = map(sin(a + phase), -1, 1, 0, noiseMax);
    float r = map(noise(xoff, yoff, zoff), 0, 1, 100, height);
    float x = r * cos(a);
    float y = r * sin(a);
    vertex (x, y);
  }
  endShape(CLOSE);
 
  beginShape();
  float noisePax = map(mouseX, mouseY, width, 1, 4);
  for (float a = 0; a < TWO_PI; a += radians(5)) {
    float xoff = map(cos(a + phase), -1, 1, 0, noiseMax);
    float yoff = map(sin(a + phase), -1, 1, 0, noiseMax);
    float r = map(noise(xoff, yoff, zoff), 0, 1, 100, height/2);
    float x = r * cos(a);
    float y = r * sin(a);
    vertex (x, y);
  }
  endShape(CLOSE);
 
  beginShape();
  float noiseBax = map(mouseX, mouseY, width, 1, 4);
  for (float a = 0; a < TWO_PI; a += radians(5)) {
    float xoff = map(cos(a + phase), -1, 1, 0, noiseMax);
    float yoff = map(sin(a + phase), -1, 1, 0, noiseMax);
    float r = map(noise(xoff, yoff, zoff), 0, 1, 100, height - 200);
    float x = r * cos(a);
    float y = r * sin(a);
    vertex (x, y);
  }
  endShape(CLOSE);
  beginShape();
  float noiseTax = map(mouseX, mouseY, width, 1, 4);
  for (float a = 0; a < TWO_PI; a += radians(5)) {
    float xoff = map(cos(a + phase), -1, 1, 0, noiseMax);
    float yoff = map(sin(a + phase), -1, 1, 0, noiseMax);
    float r = map(noise(xoff, yoff, zoff), 0, 1, 100, height/3);
    float x = r * cos(a);
    float y = r * sin(a);
    vertex (x, y);
  }
  endShape(CLOSE);
 
  beginShape();
  float noiseYax = map(mouseX, mouseY, width, 1, 4);
  for (float a = 0; a < TWO_PI; a += radians(5)) {
    float xoff = map(cos(a + phase), -1, 1, 0, noiseMax);
    float yoff = map(sin(a + phase), -1, 1, 0, noiseMax);
    float r = map(noise(xoff, yoff, zoff), 0, 1, 100, height + 300);
    float x = r * cos(a);
    float y = r * sin(a);
    vertex (x, y);
  }
  endShape(CLOSE);
 
  phase+= 0.003;
  zoff+= 0.01;
  popMatrix();

pushMatrix();
translate(width/2, height/2);
fill(255);
  strokeWeight(20);
  stroke(0);
  beginShape();
  for (float a = 0; a < TWO_PI; a+=0.01) {
    float r = b1.currentDiameter*3/5;
    float x = r * 2 *cos(a);
    float y = r * pow(sin(a), 3);
    vertex(x, y);
  }
  endShape();
  popMatrix();

  b1.step();
  b1.display();
}
 

class Bubble {
 
  float startDiameter;
  float currentDiameter;
 
  Bubble(float startD) {
    startDiameter = startD;
    currentDiameter = startDiameter;
  }
 void step() {
    currentDiameter -=4;
    if (currentDiameter<=50) {
      loadNextImage();
      currentDiameter = startDiameter;



    }
  }
 
  void display() {
 
    stroke(20);
    strokeWeight(currentDiameter/5);
    noFill();
    imageMode(CENTER);
    image(flowers[index], width/2, height/2, currentDiameter*5/6, currentDiameter*5/6);
   ellipse(width/2, height/2, currentDiameter, currentDiameter);

  }
}
